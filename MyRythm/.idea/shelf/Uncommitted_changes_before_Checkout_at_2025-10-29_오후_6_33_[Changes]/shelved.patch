Index: feature/auth/src/main/java/com/auth/loginScreen.kt
===================================================================
diff --git a/feature/auth/src/main/java/com/auth/loginScreen.kt b/feature/auth/src/main/java/com/auth/loginScreen.kt
deleted file mode 100644
--- a/feature/auth/src/main/java/com/auth/loginScreen.kt	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
+++ /dev/null	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
@@ -1,170 +0,0 @@
-package com.auth
-
-import androidx.compose.foundation.BorderStroke
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.shape.CircleShape
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Visibility
-import androidx.compose.material.icons.filled.VisibilityOff
-import androidx.compose.material3.*
-import androidx.compose.runtime.*
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.input.ImeAction
-import androidx.compose.ui.text.input.PasswordVisualTransformation
-import androidx.compose.ui.text.input.VisualTransformation
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import com.common.design.R
-
-@Composable
-fun LoginScreen(
-    modifier: Modifier = Modifier,
-    onLogin: (id: String, pw: String) -> Unit = { _, _ -> },
-    onForgotPassword: () -> Unit = {},
-    onSignUp: () -> Unit = {}
-) {
-    var id by remember { mutableStateOf("") }
-    var pw by remember { mutableStateOf("") }
-    var pwVisible by remember { mutableStateOf(false) }
-
-    Box(
-        modifier = modifier
-            .fillMaxSize()
-            .background(Color(0xff6ae0d9))
-    ) {
-        Column(
-            modifier = Modifier
-                .fillMaxSize()
-                .padding(horizontal = 24.dp, vertical = 16.dp),
-            horizontalAlignment = Alignment.CenterHorizontally
-        ) {
-            Spacer(Modifier.height(50.dp))
-
-            Image(
-                painter = painterResource(id = R.drawable.logo),
-                contentDescription = "logo",
-                modifier = Modifier
-                    .size(180.dp)
-                    .clip(CircleShape)
-            )
-
-            Spacer(Modifier.height(10.dp))
-
-            Image(
-                painter = painterResource(id = R.drawable.login_myrhythm),
-                contentDescription = "title",
-                modifier = Modifier
-                    .width(320.dp)
-                    .height(96.dp)
-            )
-
-            Spacer(Modifier.height(30.dp))
-
-            OutlinedTextField(
-                value = id,
-                onValueChange = { id = it },
-                placeholder = { Text("ÏïÑÏù¥Îîî", color = Color.Gray) },
-                singleLine = true,
-                shape = RoundedCornerShape(12.dp),
-                modifier = Modifier.fillMaxWidth(),
-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                colors = TextFieldDefaults.colors(
-                    focusedContainerColor = Color.White,
-                    unfocusedContainerColor = Color.White,
-                    focusedIndicatorColor = Color(0xFF6AC0E0),
-                    unfocusedIndicatorColor = Color.LightGray,
-                    cursorColor = Color(0xFF6AC0E0),
-                    focusedTextColor = Color.Black,
-                    unfocusedTextColor = Color.Black
-                )
-            )
-
-            Spacer(Modifier.height(12.dp))
-
-            OutlinedTextField(
-                value = pw,
-                onValueChange = { pw = it },
-                placeholder = { Text("ÎπÑÎ∞ÄÎ≤àÌò∏", color = Color.Gray) },
-                singleLine = true,
-                shape = RoundedCornerShape(12.dp),
-                modifier = Modifier.fillMaxWidth(),
-                visualTransformation = if (pwVisible) VisualTransformation.None else PasswordVisualTransformation(),
-                trailingIcon = {
-                    IconButton(onClick = { pwVisible = !pwVisible }) {
-                        Icon(
-                            imageVector = if (pwVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,
-                            contentDescription = "toggle password",
-                            tint = Color(0xFF6AC0E0)
-                        )
-                    }
-                },
-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                colors = TextFieldDefaults.colors(
-                    focusedContainerColor = Color.White,
-                    unfocusedContainerColor = Color.White,
-                    focusedIndicatorColor = Color(0xFF6AC0E0),
-                    unfocusedIndicatorColor = Color.LightGray,
-                    cursorColor = Color(0xFF6AC0E0),
-                    focusedTextColor = Color.Black,
-                    unfocusedTextColor = Color.Black
-                )
-            )
-
-            Spacer(Modifier.height(8.dp))
-
-            Text(
-                text = "ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûäÏúºÏÖ®ÎÇòÏöî?",
-                color = Color(0xFF2F6B73),
-                modifier = Modifier
-                    .align(Alignment.End)
-                    .clickable { onForgotPassword() }
-                    .padding(vertical = 4.dp)
-            )
-
-            // üîπ Î≤ÑÌäº Ï†Ñ Ïó¨Î∞± Í∞ÄÎ≥Ä (ÏïÑÎûòÎ°ú ÎÇ¥Î¶¥ÏàòÎ°ù Í∞í Ï§ÑÏù¥Í∏∞)
-            Spacer(Modifier.weight(0.15f))
-
-            Button(
-                onClick = { onLogin(id, pw) },
-                shape = RoundedCornerShape(12.dp),
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .height(56.dp),
-                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF6AC0E0))
-            ) {
-                Text("Î°úÍ∑∏Ïù∏", color = Color.White)
-            }
-
-            Spacer(Modifier.height(14.dp))
-
-            OutlinedButton(
-                onClick = onSignUp,
-                shape = RoundedCornerShape(12.dp),
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .height(52.dp),
-                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.White),
-                border = BorderStroke(1.dp, Color.White)
-            ) {
-                Text("ÌöåÏõêÍ∞ÄÏûÖ", color = Color.White)
-            }
-
-            Spacer(Modifier.height(120.dp)) // ÌïòÎã® ÏÇ¥Ïßù ÎùÑÏõÄ
-        }
-    }
-}
-
-@Preview(showBackground = true)
-@Composable
-private fun PreviewLogin() {
-    LoginScreen()
-}
Index: feature/auth/src/main/java/com/auth/pwdScreen.kt
===================================================================
diff --git a/feature/auth/src/main/java/com/auth/pwdScreen.kt b/feature/auth/src/main/java/com/auth/pwdScreen.kt
deleted file mode 100644
--- a/feature/auth/src/main/java/com/auth/pwdScreen.kt	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
+++ /dev/null	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
@@ -1,141 +0,0 @@
-package com.auth
-
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.shape.CircleShape
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material3.*
-import androidx.compose.runtime.*
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.input.ImeAction
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import com.common.design.R
-
-@Composable
-fun PwdScreen(
-    modifier: Modifier = Modifier,
-    onSendCode: (phone: String) -> Unit = {},
-    onConfirm: (code: String) -> Unit = {},
-    onGoLogin: () -> Unit = {}
-) {
-    var phone by remember { mutableStateOf("") }
-    var code by remember { mutableStateOf("") }
-
-    Box(
-        modifier = modifier
-            .fillMaxSize()
-            .background(Color(0xffb5e5e1))
-            .padding(horizontal = 24.dp)
-    ) {
-        Column(
-            Modifier.fillMaxSize(),
-            horizontalAlignment = Alignment.CenterHorizontally
-        ) {
-            Spacer(Modifier.height(64.dp))
-
-            Image(
-                painter = painterResource(id = R.drawable.logo),
-                contentDescription = "logo",
-                modifier = Modifier.size(96.dp).clip(CircleShape)
-            )
-            Spacer(Modifier.height(16.dp))
-            Image(
-                painter = painterResource(id = R.drawable.login_myrhythm),
-                contentDescription = "title",
-                modifier = Modifier.width(220.dp).height(64.dp)
-            )
-
-            Spacer(Modifier.height(40.dp))
-
-            // Ìú¥ÎåÄÌè∞ Î≤àÌò∏ + Ï†ÑÏÜ° Î≤ÑÌäº
-            Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
-                OutlinedTextField(
-                    value = phone,
-                    onValueChange = { phone = it },
-                    placeholder = { Text("Ìú¥ÎåÄÌè∞ Î≤àÌò∏") },
-                    singleLine = true,
-                    shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = TextFieldDefaults.colors(
-                        focusedContainerColor = Color.White,
-                        unfocusedContainerColor = Color.White,
-                        focusedIndicatorColor = Color(0xFF6AC0E0),
-                        unfocusedIndicatorColor = Color.LightGray,
-                        cursorColor = Color(0xFF6AC0E0),
-                        focusedTextColor = Color.Black,
-                        unfocusedTextColor = Color.Black
-                    )
-                )
-                Spacer(Modifier.width(8.dp))
-                Button(
-                    onClick = { onSendCode(phone) },
-                    shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.height(56.dp)
-                ) { Text("Ï†ÑÏÜ°") }
-            }
-
-            Spacer(Modifier.height(12.dp))
-
-            // Ïù∏Ï¶ùÎ≤àÌò∏ ÏûÖÎ†•
-            OutlinedTextField(
-                value = code,
-                onValueChange = { code = it },
-                placeholder = { Text("Ïù∏Ï¶ùÎ≤àÌò∏") },
-                singleLine = true,
-                shape = RoundedCornerShape(10.dp),
-                modifier = Modifier.fillMaxWidth(),
-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                colors = TextFieldDefaults.colors(
-                    focusedContainerColor = Color.White,
-                    unfocusedContainerColor = Color.White,
-                    focusedIndicatorColor = Color(0xFF6AC0E0),
-                    unfocusedIndicatorColor = Color.LightGray,
-                    cursorColor = Color(0xFF6AC0E0),
-                    focusedTextColor = Color.Black,
-                    unfocusedTextColor = Color.Black
-                )
-            )
-
-            Spacer(Modifier.height(16.dp))
-
-            // ÌôïÏù∏ Î≤ÑÌäº
-            Button(
-                onClick = { onConfirm(code) },
-                shape = RoundedCornerShape(10.dp),
-                modifier = Modifier.fillMaxWidth().height(56.dp),
-                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF6AC0E0))
-            ) { Text("ÌôïÏù∏", color = Color.White) }
-
-            Spacer(Modifier.height(12.dp))
-
-            // Î°úÍ∑∏Ïù∏ÏúºÎ°ú
-            OutlinedButton(
-                onClick = onGoLogin,
-                enabled = true, // Ìï≠ÏÉÅ ÌôúÏÑ±Ìôî
-                shape = RoundedCornerShape(10.dp),
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .height(48.dp),
-                colors = ButtonDefaults.outlinedButtonColors(
-                    contentColor = Color(0xFF6AC0E0)
-                )
-            ) {
-                Text("Î°úÍ∑∏Ïù∏ÏúºÎ°ú", color = Color(0xFF6AC0E0))
-            }
-        }
-    }
-}
-
-@Preview(showBackground = true)
-@Composable
-private fun PreviewPwd() {
-    PwdScreen()
-}
Index: feature/auth/src/main/java/com/auth/signupScreen.kt
===================================================================
diff --git a/feature/auth/src/main/java/com/auth/signupScreen.kt b/feature/auth/src/main/java/com/auth/signupScreen.kt
deleted file mode 100644
--- a/feature/auth/src/main/java/com/auth/signupScreen.kt	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
+++ /dev/null	(revision 75c955c729af06f3519321ed347420df7bfd4e10)
@@ -1,225 +0,0 @@
-package com.auth
-
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.shape.CircleShape
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material3.*
-import androidx.compose.runtime.*
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.text.input.ImeAction
-import androidx.compose.ui.tooling.preview.Preview
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
-import com.common.design.R
-import com.ui.theme.AuthBackground
-import com.ui.theme.AuthOnPrimary
-import com.ui.theme.AuthOnSecondray
-import com.ui.theme.AuthSecondrayButton
-
-@Composable
-fun SignupScreen(
-    modifier: Modifier = Modifier,
-    onSendCode: (phone: String) -> Unit = {},
-    onVerify: (code: String) -> Unit = {},
-    onComplete: () -> Unit = {},          // ‚Üê ÏôÑÎ£å Ïãú Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïù¥Îèô Ï≤òÎ¶¨
-    onWriteLater: () -> Unit = {}
-) {
-    // ÏûÖÎ†• ÏÉÅÌÉú
-    var name by remember { mutableStateOf("") }
-    var year by remember { mutableStateOf("") }
-    var month by remember { mutableStateOf("") }
-    var day by remember { mutableStateOf("") }
-    var height by remember { mutableStateOf("") }
-    var weight by remember { mutableStateOf("") }
-    var phone by remember { mutableStateOf("") }
-    var code by remember { mutableStateOf("") }
-
-    // Ïù∏Ï¶ù ÏÉÅÌÉú
-    var sent by remember { mutableStateOf(false) }
-    var verified by remember { mutableStateOf(false) }
-
-    val tfColors = TextFieldDefaults.colors(
-        focusedContainerColor = Color.White,
-        unfocusedContainerColor = Color.White,
-        disabledContainerColor = Color.White,
-        focusedIndicatorColor = AuthSecondrayButton,
-        unfocusedIndicatorColor = Color.LightGray,
-        cursorColor = AuthSecondrayButton,
-        focusedTextColor = Color.Black,
-        unfocusedTextColor = Color.Black
-    )
-
-    Scaffold(modifier = modifier.fillMaxSize()) { inner ->
-        Column(
-            horizontalAlignment = Alignment.CenterHorizontally,
-            modifier = Modifier
-                .padding(inner)
-                .fillMaxSize()
-                .background(AuthBackground)
-                .padding(horizontal = 24.dp, vertical = 30.dp)
-        ) {
-            Image(
-                painter = painterResource(id = R.drawable.logo),
-                contentDescription = "logo",
-                modifier = Modifier.size(120.dp).clip(CircleShape)
-            )
-            Spacer(Modifier.height(24.dp))
-
-            // Ïù¥Î¶Ñ
-            OutlinedTextField(
-                value = name, onValueChange = { name = it },
-                placeholder = { Text("Ïù¥Î¶Ñ", color = AuthOnPrimary.copy(alpha = .6f)) },
-                singleLine = true,
-                shape = RoundedCornerShape(10.dp),
-                modifier = Modifier.fillMaxWidth(),
-                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                colors = tfColors
-            )
-
-            Spacer(Modifier.height(24.dp))
-
-            Text("ÏÉùÎÖÑÏõîÏùº", color = AuthOnPrimary, fontSize = 13.sp, modifier = Modifier.fillMaxWidth())
-
-            // ÏÉùÎÖÑ/Ïõî/Ïùº
-            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(10.dp)) {
-                OutlinedTextField(
-                    value = year, onValueChange = { year = it },
-                    placeholder = { Text("1995") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1.5f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = tfColors
-                )
-                OutlinedTextField(
-                    value = month, onValueChange = { month = it },
-                    placeholder = { Text("1") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = tfColors
-                )
-                OutlinedTextField(
-                    value = day, onValueChange = { day = it },
-                    placeholder = { Text("1") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = tfColors
-                )
-            }
-
-            Spacer(Modifier.height(24.dp))
-
-            // ÌÇ§ / Î™∏Î¨¥Í≤å
-            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(14.dp)) {
-                OutlinedTextField(
-                    value = height, onValueChange = { height = it },
-                    placeholder = { Text("ÌÇ§(cm)") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = tfColors
-                )
-                OutlinedTextField(
-                    value = weight, onValueChange = { weight = it },
-                    placeholder = { Text("Î™∏Î¨¥Í≤å(kg)") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
-                    colors = tfColors
-                )
-            }
-
-            Spacer(Modifier.height(24.dp))
-
-            Text("Ï†ÑÌôîÎ≤àÌò∏ Ïù∏Ï¶ù *", color = AuthOnPrimary, fontSize = 13.sp, modifier = Modifier.fillMaxWidth())
-
-            // Ï†ÑÌôîÎ≤àÌò∏ + Ï†ÑÏÜ°
-            Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
-                OutlinedTextField(
-                    value = phone, onValueChange = { phone = it },
-                    placeholder = { Text("010-1111-1111") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    colors = tfColors
-                )
-                Spacer(Modifier.width(8.dp))
-                Button(
-                    onClick = {
-                        sent = true
-                        onSendCode(phone)
-                    },
-                    enabled = !sent && phone.isNotBlank(),
-                    shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.height(56.dp),
-                    colors = ButtonDefaults.buttonColors(containerColor = AuthSecondrayButton, disabledContainerColor = AuthSecondrayButton.copy(alpha = .5f))
-                ) { Text(if (sent) "Ï†ÑÏÜ°Îê®" else "Ï†ÑÏÜ°", color = AuthOnSecondray) }
-            }
-
-            Spacer(Modifier.height(12.dp))
-
-            // Ïù∏Ï¶ùÎ≤àÌò∏ + Ïù∏Ï¶ù
-            Row(Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
-                OutlinedTextField(
-                    value = code, onValueChange = { code = it },
-                    placeholder = { Text("Ïù∏Ï¶ùÎ≤àÌò∏") },
-                    singleLine = true, shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.weight(1f),
-                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
-                    colors = tfColors
-                )
-                Spacer(Modifier.width(8.dp))
-                Button(
-                    onClick = {
-                        verified = true
-                        onVerify(code)
-                    },
-                    enabled = sent && code.isNotBlank(),
-                    shape = RoundedCornerShape(10.dp),
-                    modifier = Modifier.height(56.dp),
-                    colors = ButtonDefaults.buttonColors(containerColor = AuthSecondrayButton, disabledContainerColor = AuthSecondrayButton.copy(alpha = .5f))
-                ) { Text("Ïù∏Ï¶ù", color = AuthOnSecondray) }
-            }
-
-            Spacer(Modifier.height(24.dp))
-
-            // ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï ÏôÑÎ£å
-            Button(
-                onClick = { onComplete() },          // ‚Üê Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïù¥Îèô Ïó∞Í≤∞
-                enabled = true,
-                colors = ButtonDefaults.buttonColors(
-                    containerColor = AuthSecondrayButton,
-                    disabledContainerColor = AuthSecondrayButton.copy(alpha = .5f)
-                ),
-                shape = RoundedCornerShape(10.dp),
-                modifier = Modifier.fillMaxWidth().height(62.dp)
-            ) { Text("ÌöåÏõê Í∞ÄÏûÖ ÏôÑÎ£å", color = AuthOnSecondray, fontSize = 14.sp) }
-
-            Spacer(Modifier.height(16.dp))
-
-            Row(
-                horizontalArrangement = Arrangement.Center,
-                verticalAlignment = Alignment.CenterVertically,
-                modifier = Modifier.fillMaxWidth().clickable { onWriteLater() }.padding(vertical = 8.dp)
-            ) {
-                Text("ÎÇòÏ§ëÏóê ÏûëÏÑ±ÌïòÍ∏∞", color = Color.Black, fontSize = 14.sp)
-                Spacer(Modifier.width(8.dp))
-                Text("(ÏùºÎ∂Ä Í∏∞Îä• Ï†úÌïú)", color = Color(0xFF7CC8E4), fontSize = 16.sp)
-            }
-        }
-    }
-}
-
-@Preview(showBackground = true)
-@Composable
-private fun SignupScreenPreview() {
-    SignupScreen()
-}
