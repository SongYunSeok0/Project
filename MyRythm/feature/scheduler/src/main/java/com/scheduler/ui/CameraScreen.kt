package com.scheduler.ui

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import com.common.design.R

private val Mint = Color(0xFF6AE0D9)

@Composable
fun CameraScreen(
    modifier: Modifier = Modifier,
    onTakePhoto: () -> Unit = {},                 // ‚Üê OCRÎ°ú Ïù¥Îèô
    onPickFromGallery: (Uri?) -> Unit = {}        // ‚Üê ÏÑ†ÌÉù Í≤∞Í≥º Ï†ÑÎã¨(ÏõêÌïòÎ©¥ OCRÎ°ú Ïù¥Îèô)
) {
    val galleryPicker = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri -> onPickFromGallery(uri) }

    Scaffold(
        contentWindowInsets = WindowInsets(0,0,0,0)
    ) { inner ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(inner)
                .padding(horizontal = 20.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            // ÌîÑÎ¶¨Î∑∞ Î∞ïÏä§
            Surface(
                shape = RoundedCornerShape(14.dp),
                color = Color(0xFFF9F9F9),
                border = BorderStroke(1.66.dp, Mint),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 12.dp)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(459.dp)
                ) {
                    Row(
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(456.dp)
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.camera),
                            contentDescription = null,
                            modifier = Modifier.size(48.dp),
                            colorFilter = ColorFilter.tint(Mint)
                        )
                    }
                    Box(
                        modifier = Modifier
                            .align(Alignment.TopCenter)
                            .padding(top = 34.dp)
                            .width(277.dp)
                            .height(392.dp)
                            .clip(RoundedCornerShape(10.dp))
                            .border(BorderStroke(1.66.dp, Color.White), RoundedCornerShape(10.dp))
                    )
                    Box(
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .padding(bottom = 12.dp)
                            .width(243.dp)
                            .height(36.dp)
                            .clip(RoundedCornerShape(28.dp))
                            .background(Color.White.copy(alpha = 0.9f))
                    ) {
                        Text(
                            text = "Ï≤òÎ∞©Ï†ÑÏùÑ ÌîÑÎ†àÏûÑ ÏïàÏóê ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî",
                            color = Color(0xFF3B566E),
                            textAlign = TextAlign.Center,
                            lineHeight = 1.43.em,
                            style = TextStyle(fontSize = 14.sp),
                            modifier = Modifier.align(Alignment.Center)
                        )
                    }
                }
            }

            // Í∞ÄÏù¥Îìú Ïπ¥Îìú
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .clip(RoundedCornerShape(14.dp))
                    .background(Color(0xFFE4F5F4))
                    .padding(16.dp)
            ) {
                Text("üìã Ï¥¨ÏòÅ Í∞ÄÏù¥Îìú", color = Color(0xFF5DB0A8), fontSize = 14.sp)
                Text("‚Ä¢ Î∞ùÏùÄ Í≥≥ÏóêÏÑú Ï¥¨ÏòÅÌïòÎ©¥ Ïù∏ÏãùÎ•†Ïù¥ ÎÜíÏïÑÏßëÎãàÎã§", color = Color(0xFF6F8BA4), fontSize = 14.sp)
                Text("‚Ä¢ Í∏ÄÏî®Í∞Ä ÏÑ†Î™ÖÌïòÍ≤å Î≥¥Ïù¥ÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî", color = Color(0xFF6F8BA4), fontSize = 14.sp)
            }

            // Î≤ÑÌäº ÏòÅÏó≠
            Column(verticalArrangement = Arrangement.spacedBy(12.dp), modifier = Modifier.fillMaxWidth()) {

                Button(
                    onClick = onTakePhoto,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .shadow(1.dp, RoundedCornerShape(14.dp)),
                    shape = RoundedCornerShape(14.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Mint)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.camera),
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        colorFilter = ColorFilter.tint(Color.White)
                    )
                    Spacer(Modifier.width(12.dp))
                    Text("ÏÇ¨ÏßÑ Ï¥¨ÏòÅ", color = Color.White, fontSize = 16.sp)
                }

                OutlinedButton(
                    onClick = { galleryPicker.launch("image/*") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .shadow(1.dp, RoundedCornerShape(14.dp)),
                    shape = RoundedCornerShape(14.dp),
                    colors = ButtonDefaults.outlinedButtonColors(
                        containerColor = Color.White,
                        contentColor = Mint
                    ),
                    border = BorderStroke(1.66.dp, Mint)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.upload),
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        colorFilter = ColorFilter.tint(Mint)
                    )
                    Spacer(Modifier.width(12.dp))
                    Text("Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉù", fontSize = 16.sp)
                }
            }
        }
    }
}


@Preview(widthDp = 392, heightDp = 917, showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun CameraScreenPreview() {
    CameraScreen()
}
