package com.example.scheduler

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import com.example.common.design.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CameraScreen(modifier: Modifier = Modifier) {
    Scaffold(
        containerColor = Color.White,
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Text(
                        text = "Ï≤òÎ∞©Ï†Ñ Ïù∏Ïãù",
                        color = Color.Black,
                        textAlign = TextAlign.Center,
                        style = TextStyle(fontSize = 16.sp, letterSpacing = 1.sp)
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { /* ‚Üê Ïó¨Í∏∞Ïóê Îí§Î°úÍ∞ÄÍ∏∞ ÎèôÏûë */ }) {
                        Image(
                            painter = painterResource(id = R.drawable.back),
                            contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                            modifier = Modifier.size(24.dp),
                            colorFilter = ColorFilter.tint(Color(0xFF6AE0D9))
                        )
                    }
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = Color(0xFFE4F5F4)
                )
            )
        }
    ) { innerPadding ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(horizontal = 24.dp),           // Ï¢åÏö∞ Ïó¨Î∞±
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            // ÌîÑÎ¶¨Î∑∞ Î∞ïÏä§
            Surface(
                shape = RoundedCornerShape(14.dp),
                color = Color(0xFFF9F9F9),
                border = BorderStroke(1.66.dp, Color(0xFF6AE0D9)),
                modifier = Modifier.fillMaxWidth()
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(459.dp)
                ) {
                    // Ïπ¥Î©îÎùº Ïã¨Î≥º
                    Row(
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(456.dp)
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.camera),
                            contentDescription = "Camera Icon",
                            modifier = Modifier.size(48.dp),
                            colorFilter = ColorFilter.tint(Color(0xFF6AE0D9))
                        )
                    }
                    // ÏïàÏ™Ω ÌÖåÎëêÎ¶¨ ÌîÑÎ†àÏûÑ
                    Box(
                        modifier = Modifier
                            .align(Alignment.TopCenter)
                            .padding(top = 34.dp)
                            .width(277.dp)
                            .height(392.dp)
                            .clip(RoundedCornerShape(10.dp))
                            .border(
                                border = BorderStroke(1.66.dp, Color.White),
                                shape = RoundedCornerShape(10.dp)
                            )
                    )
                    // ÏïàÎÇ¥ ÌÖçÏä§Ìä∏ Ïπ©
                    Box(
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .padding(bottom = 12.dp)
                            .width(243.dp)
                            .height(36.dp)
                            .clip(RoundedCornerShape(28.dp))
                            .background(Color.White.copy(alpha = 0.9f))
                    ) {
                        Text(
                            text = "Ï≤òÎ∞©Ï†ÑÏùÑ ÌîÑÎ†àÏûÑ ÏïàÏóê ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî",
                            color = Color(0xFF3B566E),
                            textAlign = TextAlign.Center,
                            lineHeight = 1.43.em,
                            style = TextStyle(fontSize = 14.sp),
                            modifier = Modifier.align(Alignment.Center)
                        )
                    }
                }
            }

            // Í∞ÄÏù¥Îìú Ïπ¥Îìú
            Column(
                verticalArrangement = Arrangement.spacedBy(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .clip(RoundedCornerShape(14.dp))
                    .background(Color(0xFFE4F5F4))
                    .padding(16.dp)
            ) {
                Text(
                    text = "üìã Ï¥¨ÏòÅ Í∞ÄÏù¥Îìú",
                    color = Color(0xFF5DB0A8),
                    lineHeight = 1.43.em,
                    style = TextStyle(fontSize = 14.sp),
                    modifier = Modifier.fillMaxWidth()
                )
                Text(
                    text = "‚Ä¢ Î∞ùÏùÄ Í≥≥ÏóêÏÑú Ï¥¨ÏòÅÌïòÎ©¥ Ïù∏ÏãùÎ•†Ïù¥ ÎÜíÏïÑÏßëÎãàÎã§",
                    color = Color(0xFF6F8BA4),
                    lineHeight = 1.43.em,
                    style = TextStyle(fontSize = 14.sp)
                )
                Text(
                    text = "‚Ä¢ Í∏ÄÏî®Í∞Ä ÏÑ†Î™ÖÌïòÍ≤å Î≥¥Ïù¥ÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî",
                    color = Color(0xFF6F8BA4),
                    lineHeight = 1.43.em,
                    style = TextStyle(fontSize = 14.sp)
                )
            }

            // Î≤ÑÌäº ÏòÅÏó≠
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                // Ï¥¨ÏòÅ Î≤ÑÌäº
                Row(
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .clip(RoundedCornerShape(14.dp))
                        .background(Color(0xFF6AE0D9))
                        .shadow(1.dp, RoundedCornerShape(14.dp))
                        .padding(horizontal = 16.dp)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.camera),
                        contentDescription = "Camera Icon",
                        modifier = Modifier.size(20.dp),
                        colorFilter = ColorFilter.tint(Color.White)
                    )
                    Spacer(Modifier.width(12.dp))
                    Text(
                        text = "ÏÇ¨ÏßÑ Ï¥¨ÏòÅ",
                        color = Color.White,
                        lineHeight = 1.5.em,
                        style = TextStyle(fontSize = 16.sp)
                    )
                }

                // Í∞§Îü¨Î¶¨ ÏÑ†ÌÉù Î≤ÑÌäº
                Row(
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(59.dp)
                        .clip(RoundedCornerShape(14.dp))
                        .background(Color(0xFF6AE0D9))
                        .shadow(1.dp, RoundedCornerShape(14.dp))
                        .border(
                            BorderStroke(1.66.dp, Color(0xFF6AE0D9)),
                            RoundedCornerShape(14.dp)
                        )
                        .padding(horizontal = 16.dp)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.upload),
                        contentDescription = "Upload Icon",
                        modifier = Modifier.size(20.dp),
                        colorFilter = ColorFilter.tint(Color(0xFFFFFFFF))
                    )
                    Spacer(Modifier.width(12.dp))
                    Text(
                        text = "Í∞§Îü¨Î¶¨ÏóêÏÑú ÏÑ†ÌÉù",
                        color = Color(0xFFFFFFFF),
                        lineHeight = 1.5.em,
                        style = TextStyle(fontSize = 16.sp)
                    )
                }
            }
        }
    }
}

@Preview(widthDp = 392, heightDp = 917, showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun CameraScreenPreview() {
    CameraScreen()
}
