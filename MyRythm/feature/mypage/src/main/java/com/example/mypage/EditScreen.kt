package com.example.mypage

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.common.design.R



@Composable
fun EditScreen(modifier: Modifier = Modifier,  onDone: () -> Unit = {}) {
    var selectedGender by remember { mutableStateOf("ÎÇ®ÏÑ±") }
    var selectedBloodType by remember { mutableStateOf("AÌòï") }

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(horizontal = 24.dp, vertical = 16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Ïú†Ï†Ä ÌîÑÎ°úÌïÑ ÏòÅÏó≠
        Row(verticalAlignment = Alignment.CenterVertically) {
            Box(
                modifier = Modifier
                    .size(90.dp)
                    .clip(RoundedCornerShape(999.dp))
                    .background(Color(0xffffb7c5))
                    .shadow(4.dp, RoundedCornerShape(999.dp)),
                contentAlignment = Alignment.Center
            ) {
                Text(text = "üòä", fontSize = 48.sp)
                Box(
                    modifier = Modifier
                        .size(28.dp)
                        .align(Alignment.BottomEnd)
                        .offset(x = -9.dp, y = -9.dp)
                        .clip(RoundedCornerShape(999.dp))
                        .background(Color(0xff6ae0d9))
                        .padding(5.dp)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.camera),
                        contentDescription = "ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Î≥ÄÍ≤Ω",
                        modifier = Modifier.fillMaxSize()
                    )
                }
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(text = "ÍπÄÏù¥Î¶Ñ", fontSize = 16.sp, color = Color(0xff221f1f))
                Text(
                    text = "ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Î≥ÄÍ≤Ω",
                    fontSize = 14.sp,
                    color = Color(0xff5db0a8)
                )
            }

            Spacer(modifier = Modifier.width(66.dp))

            Box(
                modifier = Modifier
                    .width(90.dp)
                    .height(40.dp)
                    .clip(RoundedCornerShape(14.dp))
                    .background(Color(0xff6ae0d9))

                    .clickable {
                        // Ï†ÄÏû• Î°úÏßÅ Ï∂îÍ∞Ä Í∞ÄÎä•
                    },
                contentAlignment = Alignment.Center
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Image(
                        painter = painterResource(id = R.drawable.edit),
                        contentDescription = null,
                        modifier = Modifier.size(20.dp)
                    )

                    Text(text = "Ìé∏Ïßë", color = Color.White, fontSize = 16.sp)
                }
            }

        }

        // ÏûÖÎ†• ÌïÑÎìúÎì§
        Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
            EditableField(label = "Ïù¥Î¶Ñ", value = "ÍπÄÏù¥Î¶Ñ")
            EditableField(label = "ÌÇ§ (cm)", value = "170")
            EditableField(label = "Î™∏Î¨¥Í≤å (kg)", value = "47")
            EditableField(label = "ÎÇòÏù¥", value = "25")

            // ‚úÖ ÏÑ±Î≥Ñ ÏÑ†ÌÉù Î≤ÑÌäº
            SelectableButtonGroup(
                label = "ÏÑ±Î≥Ñ",
                options = listOf("ÎÇ®ÏÑ±", "Ïó¨ÏÑ±"),
                selectedOption = selectedGender,
                onOptionSelected = { selectedGender = it }
            )

            // ‚úÖ ÌòàÏï°Ìòï ÏÑ†ÌÉù Î≤ÑÌäº
            SelectableButtonGroup(
                label = "ÌòàÏï°Ìòï",
                options = listOf("AÌòï", "BÌòï", "ABÌòï", "OÌòï"),
                selectedOption = selectedBloodType,
                onOptionSelected = { selectedBloodType = it }
            )
        }

        // ÏàòÏ†ï ÏôÑÎ£å Î≤ÑÌäº
        Spacer(modifier = Modifier.height(16.dp))
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .clip(RoundedCornerShape(14.dp))
                .background(Color(0xff6ae0d9))
                .padding(horizontal = 16.dp)
                .clickable { onDone() },
            contentAlignment = Alignment.Center
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Image(
                    painter = painterResource(id = R.drawable.save),
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(text = "ÏàòÏ†ï ÏôÑÎ£å", color = Color.White, fontSize = 16.sp)
            }
        }
    }
}

@Composable
fun SelectableButtonGroup(
    label: String,
    options: List<String>,
    selectedOption: String,
    onOptionSelected: (String) -> Unit
) {
    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
        Text(text = label, fontSize = 14.sp, color = Color(0xff3b566e))
        Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
            options.forEach { option ->
                Box(
                    modifier = Modifier
                        .weight(1f)
                        .height(44.dp)
                        .clip(RoundedCornerShape(14.dp))
                        .background(
                            if (option == selectedOption) Color(0xff6ae0d9)
                            else Color(0xffdddddd)
                        )
                        .clickable { onOptionSelected(option) },
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = option,
                        color = if (option == selectedOption) Color.White
                        else Color(0xff3b566e).copy(alpha = 0.7f),
                        fontSize = 14.sp
                    )
                }
            }
        }
    }
}



@Composable
fun EditableField(label: String, value: String) {
    Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {
        Text(text = label, fontSize = 14.sp, color = Color(0xff3b566e))
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(44.dp)
                .clip(RoundedCornerShape(14.dp))
                .background(Color(0xffdddddd))
                .padding(horizontal = 16.dp),
            contentAlignment = Alignment.CenterStart
        ) {
            Text(text = value, fontSize = 14.sp, color = Color(0xff3b566e).copy(alpha = 0.5f))
        }
    }
}
